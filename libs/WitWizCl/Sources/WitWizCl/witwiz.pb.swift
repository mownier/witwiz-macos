// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: libs/WitWizCl/Sources/WitWizCl/witwiz.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Witwiz_PlayerInput: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var playerID: Int32 = 0

  public var action: Witwiz_PlayerInput.Action = .moveUp

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Action: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int
    case moveUp // = 0
    case moveRight // = 1
    case moveDown // = 2
    case moveLeft // = 3
    case shoot // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .moveUp
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .moveUp
      case 1: self = .moveRight
      case 2: self = .moveDown
      case 3: self = .moveLeft
      case 4: self = .shoot
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .moveUp: return 0
      case .moveRight: return 1
      case .moveDown: return 2
      case .moveLeft: return 3
      case .shoot: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Witwiz_PlayerInput.Action] = [
      .moveUp,
      .moveRight,
      .moveDown,
      .moveLeft,
      .shoot,
    ]

  }

  public init() {}
}

public struct Witwiz_GameStateUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var players: [Witwiz_PlayerState] = []

  public var projectiles: [Witwiz_ProjectileState] = []

  public var yourPlayerID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Witwiz_PlayerState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var playerID: Int32 = 0

  public var positionX: Float = 0

  public var positionY: Float = 0

  public var boundingBoxWidth: Float = 0

  public var boundingBoxHeight: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Witwiz_ProjectileState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var projectileID: Int32 = 0

  public var ownerID: Int32 = 0

  public var positionX: Float = 0

  public var positionY: Float = 0

  public var boundingBoxWidth: Float = 0

  public var boundingBoxHeight: Float = 0

  public var velocityX: Float = 0

  public var velocityY: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "witwiz"

extension Witwiz_PlayerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayerInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_id"),
    2: .same(proto: "action"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.playerID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.playerID != 0 {
      try visitor.visitSingularInt32Field(value: self.playerID, fieldNumber: 1)
    }
    if self.action != .moveUp {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_PlayerInput, rhs: Witwiz_PlayerInput) -> Bool {
    if lhs.playerID != rhs.playerID {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_PlayerInput.Action: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MOVE_UP"),
    1: .same(proto: "MOVE_RIGHT"),
    2: .same(proto: "MOVE_DOWN"),
    3: .same(proto: "MOVE_LEFT"),
    4: .same(proto: "SHOOT"),
  ]
}

extension Witwiz_GameStateUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameStateUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "players"),
    2: .same(proto: "projectiles"),
    3: .standard(proto: "your_player_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.players) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.projectiles) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.yourPlayerID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.players.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.players, fieldNumber: 1)
    }
    if !self.projectiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.projectiles, fieldNumber: 2)
    }
    if self.yourPlayerID != 0 {
      try visitor.visitSingularInt32Field(value: self.yourPlayerID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_GameStateUpdate, rhs: Witwiz_GameStateUpdate) -> Bool {
    if lhs.players != rhs.players {return false}
    if lhs.projectiles != rhs.projectiles {return false}
    if lhs.yourPlayerID != rhs.yourPlayerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_PlayerState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayerState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_id"),
    2: .standard(proto: "position_x"),
    3: .standard(proto: "position_y"),
    4: .standard(proto: "bounding_box_width"),
    5: .standard(proto: "bounding_box_height"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.playerID) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.positionX) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.positionY) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.boundingBoxWidth) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.boundingBoxHeight) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.playerID != 0 {
      try visitor.visitSingularInt32Field(value: self.playerID, fieldNumber: 1)
    }
    if self.positionX.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.positionX, fieldNumber: 2)
    }
    if self.positionY.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.positionY, fieldNumber: 3)
    }
    if self.boundingBoxWidth.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.boundingBoxWidth, fieldNumber: 4)
    }
    if self.boundingBoxHeight.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.boundingBoxHeight, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_PlayerState, rhs: Witwiz_PlayerState) -> Bool {
    if lhs.playerID != rhs.playerID {return false}
    if lhs.positionX != rhs.positionX {return false}
    if lhs.positionY != rhs.positionY {return false}
    if lhs.boundingBoxWidth != rhs.boundingBoxWidth {return false}
    if lhs.boundingBoxHeight != rhs.boundingBoxHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_ProjectileState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProjectileState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "projectile_id"),
    2: .standard(proto: "owner_id"),
    3: .standard(proto: "position_x"),
    4: .standard(proto: "position_y"),
    5: .standard(proto: "bounding_box_width"),
    6: .standard(proto: "bounding_box_height"),
    7: .standard(proto: "velocity_x"),
    8: .standard(proto: "velocity_y"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.projectileID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.ownerID) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.positionX) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.positionY) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.boundingBoxWidth) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.boundingBoxHeight) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self.velocityX) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self.velocityY) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.projectileID != 0 {
      try visitor.visitSingularInt32Field(value: self.projectileID, fieldNumber: 1)
    }
    if self.ownerID != 0 {
      try visitor.visitSingularInt32Field(value: self.ownerID, fieldNumber: 2)
    }
    if self.positionX.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.positionX, fieldNumber: 3)
    }
    if self.positionY.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.positionY, fieldNumber: 4)
    }
    if self.boundingBoxWidth.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.boundingBoxWidth, fieldNumber: 5)
    }
    if self.boundingBoxHeight.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.boundingBoxHeight, fieldNumber: 6)
    }
    if self.velocityX.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.velocityX, fieldNumber: 7)
    }
    if self.velocityY.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.velocityY, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_ProjectileState, rhs: Witwiz_ProjectileState) -> Bool {
    if lhs.projectileID != rhs.projectileID {return false}
    if lhs.ownerID != rhs.ownerID {return false}
    if lhs.positionX != rhs.positionX {return false}
    if lhs.positionY != rhs.positionY {return false}
    if lhs.boundingBoxWidth != rhs.boundingBoxWidth {return false}
    if lhs.boundingBoxHeight != rhs.boundingBoxHeight {return false}
    if lhs.velocityX != rhs.velocityX {return false}
    if lhs.velocityY != rhs.velocityY {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
