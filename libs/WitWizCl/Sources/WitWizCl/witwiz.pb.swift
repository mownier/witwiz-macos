// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: libs/WitWizCl/Sources/WitWizCl/witwiz.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Witwiz_PlayerInput: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var playerID: Int32 = 0

  public var action: Witwiz_PlayerInput.Action = .none

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Action: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int
    case none // = 0
    case moveRightStart // = 1
    case moveRightStop // = 2
    case moveLeftStart // = 3
    case moveLeftStop // = 4
    case moveUpStart // = 5
    case moveUpStop // = 6
    case moveDownStart // = 7
    case moveDownStop // = 8
    case shoot // = 9
    case UNRECOGNIZED(Int)

    public init() {
      self = .none
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .moveRightStart
      case 2: self = .moveRightStop
      case 3: self = .moveLeftStart
      case 4: self = .moveLeftStop
      case 5: self = .moveUpStart
      case 6: self = .moveUpStop
      case 7: self = .moveDownStart
      case 8: self = .moveDownStop
      case 9: self = .shoot
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .none: return 0
      case .moveRightStart: return 1
      case .moveRightStop: return 2
      case .moveLeftStart: return 3
      case .moveLeftStop: return 4
      case .moveUpStart: return 5
      case .moveUpStop: return 6
      case .moveDownStart: return 7
      case .moveDownStop: return 8
      case .shoot: return 9
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Witwiz_PlayerInput.Action] = [
      .none,
      .moveRightStart,
      .moveRightStop,
      .moveLeftStart,
      .moveLeftStop,
      .moveUpStart,
      .moveUpStop,
      .moveDownStart,
      .moveDownStop,
      .shoot,
    ]

  }

  public init() {}
}

public struct Witwiz_GameStateUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var players: [Witwiz_PlayerState] = []

  public var projectiles: [Witwiz_ProjectileState] = []

  public var yourPlayerID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Witwiz_PlayerState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var playerID: Int32 = 0

  public var position: Witwiz_Vector2 {
    get {return _position ?? Witwiz_Vector2()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var velocity: Witwiz_Vector2 {
    get {return _velocity ?? Witwiz_Vector2()}
    set {_velocity = newValue}
  }
  /// Returns true if `velocity` has been explicitly set.
  public var hasVelocity: Bool {return self._velocity != nil}
  /// Clears the value of `velocity`. Subsequent reads from it will return its default value.
  public mutating func clearVelocity() {self._velocity = nil}

  public var acceleration: Witwiz_Vector2 {
    get {return _acceleration ?? Witwiz_Vector2()}
    set {_acceleration = newValue}
  }
  /// Returns true if `acceleration` has been explicitly set.
  public var hasAcceleration: Bool {return self._acceleration != nil}
  /// Clears the value of `acceleration`. Subsequent reads from it will return its default value.
  public mutating func clearAcceleration() {self._acceleration = nil}

  public var boundingBox: Witwiz_BoundingBox {
    get {return _boundingBox ?? Witwiz_BoundingBox()}
    set {_boundingBox = newValue}
  }
  /// Returns true if `boundingBox` has been explicitly set.
  public var hasBoundingBox: Bool {return self._boundingBox != nil}
  /// Clears the value of `boundingBox`. Subsequent reads from it will return its default value.
  public mutating func clearBoundingBox() {self._boundingBox = nil}

  public var maxSpeed: Float = 0

  public var targetVelocity: Witwiz_Vector2 {
    get {return _targetVelocity ?? Witwiz_Vector2()}
    set {_targetVelocity = newValue}
  }
  /// Returns true if `targetVelocity` has been explicitly set.
  public var hasTargetVelocity: Bool {return self._targetVelocity != nil}
  /// Clears the value of `targetVelocity`. Subsequent reads from it will return its default value.
  public mutating func clearTargetVelocity() {self._targetVelocity = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _position: Witwiz_Vector2? = nil
  fileprivate var _velocity: Witwiz_Vector2? = nil
  fileprivate var _acceleration: Witwiz_Vector2? = nil
  fileprivate var _boundingBox: Witwiz_BoundingBox? = nil
  fileprivate var _targetVelocity: Witwiz_Vector2? = nil
}

public struct Witwiz_ProjectileState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var projectileID: Int32 = 0

  public var ownerID: Int32 = 0

  public var position: Witwiz_Vector2 {
    get {return _position ?? Witwiz_Vector2()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var velocity: Witwiz_Vector2 {
    get {return _velocity ?? Witwiz_Vector2()}
    set {_velocity = newValue}
  }
  /// Returns true if `velocity` has been explicitly set.
  public var hasVelocity: Bool {return self._velocity != nil}
  /// Clears the value of `velocity`. Subsequent reads from it will return its default value.
  public mutating func clearVelocity() {self._velocity = nil}

  public var boundingBox: Witwiz_BoundingBox {
    get {return _boundingBox ?? Witwiz_BoundingBox()}
    set {_boundingBox = newValue}
  }
  /// Returns true if `boundingBox` has been explicitly set.
  public var hasBoundingBox: Bool {return self._boundingBox != nil}
  /// Clears the value of `boundingBox`. Subsequent reads from it will return its default value.
  public mutating func clearBoundingBox() {self._boundingBox = nil}

  public var maxSpeed: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _position: Witwiz_Vector2? = nil
  fileprivate var _velocity: Witwiz_Vector2? = nil
  fileprivate var _boundingBox: Witwiz_BoundingBox? = nil
}

public struct Witwiz_Vector2: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var x: Float = 0

  public var y: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Witwiz_BoundingBox: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var width: Float = 0

  public var height: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "witwiz"

extension Witwiz_PlayerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayerInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_id"),
    2: .same(proto: "action"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.playerID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.playerID != 0 {
      try visitor.visitSingularInt32Field(value: self.playerID, fieldNumber: 1)
    }
    if self.action != .none {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_PlayerInput, rhs: Witwiz_PlayerInput) -> Bool {
    if lhs.playerID != rhs.playerID {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_PlayerInput.Action: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "MOVE_RIGHT_START"),
    2: .same(proto: "MOVE_RIGHT_STOP"),
    3: .same(proto: "MOVE_LEFT_START"),
    4: .same(proto: "MOVE_LEFT_STOP"),
    5: .same(proto: "MOVE_UP_START"),
    6: .same(proto: "MOVE_UP_STOP"),
    7: .same(proto: "MOVE_DOWN_START"),
    8: .same(proto: "MOVE_DOWN_STOP"),
    9: .same(proto: "SHOOT"),
  ]
}

extension Witwiz_GameStateUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameStateUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "players"),
    2: .same(proto: "projectiles"),
    3: .standard(proto: "your_player_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.players) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.projectiles) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.yourPlayerID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.players.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.players, fieldNumber: 1)
    }
    if !self.projectiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.projectiles, fieldNumber: 2)
    }
    if self.yourPlayerID != 0 {
      try visitor.visitSingularInt32Field(value: self.yourPlayerID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_GameStateUpdate, rhs: Witwiz_GameStateUpdate) -> Bool {
    if lhs.players != rhs.players {return false}
    if lhs.projectiles != rhs.projectiles {return false}
    if lhs.yourPlayerID != rhs.yourPlayerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_PlayerState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayerState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_id"),
    2: .same(proto: "position"),
    3: .same(proto: "velocity"),
    4: .same(proto: "acceleration"),
    5: .same(proto: "boundingBox"),
    6: .same(proto: "maxSpeed"),
    7: .same(proto: "targetVelocity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.playerID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._velocity) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._acceleration) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._boundingBox) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.maxSpeed) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._targetVelocity) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.playerID != 0 {
      try visitor.visitSingularInt32Field(value: self.playerID, fieldNumber: 1)
    }
    try { if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._velocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._acceleration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._boundingBox {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.maxSpeed.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.maxSpeed, fieldNumber: 6)
    }
    try { if let v = self._targetVelocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_PlayerState, rhs: Witwiz_PlayerState) -> Bool {
    if lhs.playerID != rhs.playerID {return false}
    if lhs._position != rhs._position {return false}
    if lhs._velocity != rhs._velocity {return false}
    if lhs._acceleration != rhs._acceleration {return false}
    if lhs._boundingBox != rhs._boundingBox {return false}
    if lhs.maxSpeed != rhs.maxSpeed {return false}
    if lhs._targetVelocity != rhs._targetVelocity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_ProjectileState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProjectileState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "projectile_id"),
    2: .standard(proto: "owner_id"),
    3: .same(proto: "position"),
    4: .same(proto: "velocity"),
    5: .same(proto: "boundingBox"),
    6: .same(proto: "maxSpeed"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.projectileID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.ownerID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._velocity) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._boundingBox) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.maxSpeed) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.projectileID != 0 {
      try visitor.visitSingularInt32Field(value: self.projectileID, fieldNumber: 1)
    }
    if self.ownerID != 0 {
      try visitor.visitSingularInt32Field(value: self.ownerID, fieldNumber: 2)
    }
    try { if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._velocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._boundingBox {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.maxSpeed.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.maxSpeed, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_ProjectileState, rhs: Witwiz_ProjectileState) -> Bool {
    if lhs.projectileID != rhs.projectileID {return false}
    if lhs.ownerID != rhs.ownerID {return false}
    if lhs._position != rhs._position {return false}
    if lhs._velocity != rhs._velocity {return false}
    if lhs._boundingBox != rhs._boundingBox {return false}
    if lhs.maxSpeed != rhs.maxSpeed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_Vector2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Vector2"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.x) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.y) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 1)
    }
    if self.y.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_Vector2, rhs: Witwiz_Vector2) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_BoundingBox: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BoundingBox"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "width"),
    2: .same(proto: "height"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.width) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.height) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.width.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.width, fieldNumber: 1)
    }
    if self.height.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.height, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_BoundingBox, rhs: Witwiz_BoundingBox) -> Bool {
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
