// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: libs/WitWizCl/Sources/WitWizCl/witwiz.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Witwiz_PlayerInput: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var playerID: Int32 = 0

  public var characterID: Int32 = 0

  public var tileChunksToLoad: [Witwiz_TileChunkToLoad] = []

  public var action: Witwiz_PlayerInput.Action = .none

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Action: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int
    case none // = 0
    case moveRightStart // = 1
    case moveRightStop // = 2
    case moveLeftStart // = 3
    case moveLeftStop // = 4
    case moveUpStart // = 5
    case moveUpStop // = 6
    case moveDownStart // = 7
    case moveDownStop // = 8
    case shoot // = 9
    case selectCharacter // = 10
    case pauseResume // = 11
    case tileChunksRequest // = 12
    case UNRECOGNIZED(Int)

    public init() {
      self = .none
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .moveRightStart
      case 2: self = .moveRightStop
      case 3: self = .moveLeftStart
      case 4: self = .moveLeftStop
      case 5: self = .moveUpStart
      case 6: self = .moveUpStop
      case 7: self = .moveDownStart
      case 8: self = .moveDownStop
      case 9: self = .shoot
      case 10: self = .selectCharacter
      case 11: self = .pauseResume
      case 12: self = .tileChunksRequest
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .none: return 0
      case .moveRightStart: return 1
      case .moveRightStop: return 2
      case .moveLeftStart: return 3
      case .moveLeftStop: return 4
      case .moveUpStart: return 5
      case .moveUpStop: return 6
      case .moveDownStart: return 7
      case .moveDownStop: return 8
      case .shoot: return 9
      case .selectCharacter: return 10
      case .pauseResume: return 11
      case .tileChunksRequest: return 12
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Witwiz_PlayerInput.Action] = [
      .none,
      .moveRightStart,
      .moveRightStop,
      .moveLeftStart,
      .moveLeftStop,
      .moveUpStart,
      .moveUpStop,
      .moveDownStart,
      .moveDownStop,
      .shoot,
      .selectCharacter,
      .pauseResume,
      .tileChunksRequest,
    ]

  }

  public init() {}
}

public struct Witwiz_GameStateUpdate: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var isInitial: Bool {
    get {return _storage._isInitial}
    set {_uniqueStorage()._isInitial = newValue}
  }

  public var gameStarted: Bool {
    get {return _storage._gameStarted}
    set {_uniqueStorage()._gameStarted = newValue}
  }

  public var gameOver: Bool {
    get {return _storage._gameOver}
    set {_uniqueStorage()._gameOver = newValue}
  }

  public var gamePaused: Bool {
    get {return _storage._gamePaused}
    set {_uniqueStorage()._gamePaused = newValue}
  }

  public var levelID: Int32 {
    get {return _storage._levelID}
    set {_uniqueStorage()._levelID = newValue}
  }

  public var levelPosition: Witwiz_Point {
    get {return _storage._levelPosition ?? Witwiz_Point()}
    set {_uniqueStorage()._levelPosition = newValue}
  }
  /// Returns true if `levelPosition` has been explicitly set.
  public var hasLevelPosition: Bool {return _storage._levelPosition != nil}
  /// Clears the value of `levelPosition`. Subsequent reads from it will return its default value.
  public mutating func clearLevelPosition() {_uniqueStorage()._levelPosition = nil}

  public var levelSize: Witwiz_Size {
    get {return _storage._levelSize ?? Witwiz_Size()}
    set {_uniqueStorage()._levelSize = newValue}
  }
  /// Returns true if `levelSize` has been explicitly set.
  public var hasLevelSize: Bool {return _storage._levelSize != nil}
  /// Clears the value of `levelSize`. Subsequent reads from it will return its default value.
  public mutating func clearLevelSize() {_uniqueStorage()._levelSize = nil}

  public var nextLevelPortal: Witwiz_NextLevelPortalState {
    get {return _storage._nextLevelPortal ?? Witwiz_NextLevelPortalState()}
    set {_uniqueStorage()._nextLevelPortal = newValue}
  }
  /// Returns true if `nextLevelPortal` has been explicitly set.
  public var hasNextLevelPortal: Bool {return _storage._nextLevelPortal != nil}
  /// Clears the value of `nextLevelPortal`. Subsequent reads from it will return its default value.
  public mutating func clearNextLevelPortal() {_uniqueStorage()._nextLevelPortal = nil}

  public var characterIds: [Int32] {
    get {return _storage._characterIds}
    set {_uniqueStorage()._characterIds = newValue}
  }

  public var players: [Witwiz_PlayerState] {
    get {return _storage._players}
    set {_uniqueStorage()._players = newValue}
  }

  public var obstacles: [Witwiz_ObstacleState] {
    get {return _storage._obstacles}
    set {_uniqueStorage()._obstacles = newValue}
  }

  public var levelEdges: [Witwiz_LevelEdgeState] {
    get {return _storage._levelEdges}
    set {_uniqueStorage()._levelEdges = newValue}
  }

  public var tileChunks: [Witwiz_TileChunk] {
    get {return _storage._tileChunks}
    set {_uniqueStorage()._tileChunks = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Witwiz_PlayerState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  public var characterID: Int32 = 0

  public var maxSpeed: Float = 0

  public var position: Witwiz_Point {
    get {return _position ?? Witwiz_Point()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var size: Witwiz_Size {
    get {return _size ?? Witwiz_Size()}
    set {_size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  public var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  public mutating func clearSize() {self._size = nil}

  public var velocity: Witwiz_Vector {
    get {return _velocity ?? Witwiz_Vector()}
    set {_velocity = newValue}
  }
  /// Returns true if `velocity` has been explicitly set.
  public var hasVelocity: Bool {return self._velocity != nil}
  /// Clears the value of `velocity`. Subsequent reads from it will return its default value.
  public mutating func clearVelocity() {self._velocity = nil}

  public var acceleration: Witwiz_Vector {
    get {return _acceleration ?? Witwiz_Vector()}
    set {_acceleration = newValue}
  }
  /// Returns true if `acceleration` has been explicitly set.
  public var hasAcceleration: Bool {return self._acceleration != nil}
  /// Clears the value of `acceleration`. Subsequent reads from it will return its default value.
  public mutating func clearAcceleration() {self._acceleration = nil}

  public var targetVelocity: Witwiz_Vector {
    get {return _targetVelocity ?? Witwiz_Vector()}
    set {_targetVelocity = newValue}
  }
  /// Returns true if `targetVelocity` has been explicitly set.
  public var hasTargetVelocity: Bool {return self._targetVelocity != nil}
  /// Clears the value of `targetVelocity`. Subsequent reads from it will return its default value.
  public mutating func clearTargetVelocity() {self._targetVelocity = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _position: Witwiz_Point? = nil
  fileprivate var _size: Witwiz_Size? = nil
  fileprivate var _velocity: Witwiz_Vector? = nil
  fileprivate var _acceleration: Witwiz_Vector? = nil
  fileprivate var _targetVelocity: Witwiz_Vector? = nil
}

public struct Witwiz_NextLevelPortalState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  public var position: Witwiz_Point {
    get {return _position ?? Witwiz_Point()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var size: Witwiz_Size {
    get {return _size ?? Witwiz_Size()}
    set {_size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  public var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  public mutating func clearSize() {self._size = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _position: Witwiz_Point? = nil
  fileprivate var _size: Witwiz_Size? = nil
}

public struct Witwiz_ObstacleState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  public var position: Witwiz_Point {
    get {return _position ?? Witwiz_Point()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var size: Witwiz_Size {
    get {return _size ?? Witwiz_Size()}
    set {_size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  public var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  public mutating func clearSize() {self._size = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _position: Witwiz_Point? = nil
  fileprivate var _size: Witwiz_Size? = nil
}

public struct Witwiz_Size: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var width: Float = 0

  public var height: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Witwiz_Point: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var x: Float = 0

  public var y: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Witwiz_Vector: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var x: Float = 0

  public var y: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Witwiz_LevelEdgeState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  public var position: Witwiz_Point {
    get {return _position ?? Witwiz_Point()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var size: Witwiz_Size {
    get {return _size ?? Witwiz_Size()}
    set {_size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  public var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  public mutating func clearSize() {self._size = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _position: Witwiz_Point? = nil
  fileprivate var _size: Witwiz_Size? = nil
}

public struct Witwiz_Tile: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var row: Int32 = 0

  public var col: Int32 = 0

  public var id: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Witwiz_TileChunk: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var row: Int32 = 0

  public var col: Int32 = 0

  public var tiles: [Witwiz_Tile] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Witwiz_TileChunkToLoad: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var row: Int32 = 0

  public var col: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "witwiz"

extension Witwiz_PlayerInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayerInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_id"),
    2: .standard(proto: "character_id"),
    3: .standard(proto: "tile_chunks_to_load"),
    4: .same(proto: "action"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.playerID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.characterID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.tileChunksToLoad) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.playerID != 0 {
      try visitor.visitSingularInt32Field(value: self.playerID, fieldNumber: 1)
    }
    if self.characterID != 0 {
      try visitor.visitSingularInt32Field(value: self.characterID, fieldNumber: 2)
    }
    if !self.tileChunksToLoad.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tileChunksToLoad, fieldNumber: 3)
    }
    if self.action != .none {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_PlayerInput, rhs: Witwiz_PlayerInput) -> Bool {
    if lhs.playerID != rhs.playerID {return false}
    if lhs.characterID != rhs.characterID {return false}
    if lhs.tileChunksToLoad != rhs.tileChunksToLoad {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_PlayerInput.Action: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "MOVE_RIGHT_START"),
    2: .same(proto: "MOVE_RIGHT_STOP"),
    3: .same(proto: "MOVE_LEFT_START"),
    4: .same(proto: "MOVE_LEFT_STOP"),
    5: .same(proto: "MOVE_UP_START"),
    6: .same(proto: "MOVE_UP_STOP"),
    7: .same(proto: "MOVE_DOWN_START"),
    8: .same(proto: "MOVE_DOWN_STOP"),
    9: .same(proto: "SHOOT"),
    10: .same(proto: "SELECT_CHARACTER"),
    11: .same(proto: "PAUSE_RESUME"),
    12: .same(proto: "TILE_CHUNKS_REQUEST"),
  ]
}

extension Witwiz_GameStateUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameStateUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_initial"),
    2: .standard(proto: "game_started"),
    3: .standard(proto: "game_over"),
    4: .standard(proto: "game_paused"),
    5: .standard(proto: "level_id"),
    6: .standard(proto: "level_position"),
    7: .standard(proto: "level_size"),
    8: .standard(proto: "next_level_portal"),
    9: .standard(proto: "character_ids"),
    10: .same(proto: "players"),
    11: .same(proto: "obstacles"),
    12: .standard(proto: "level_edges"),
    13: .standard(proto: "tile_chunks"),
  ]

  fileprivate class _StorageClass {
    var _isInitial: Bool = false
    var _gameStarted: Bool = false
    var _gameOver: Bool = false
    var _gamePaused: Bool = false
    var _levelID: Int32 = 0
    var _levelPosition: Witwiz_Point? = nil
    var _levelSize: Witwiz_Size? = nil
    var _nextLevelPortal: Witwiz_NextLevelPortalState? = nil
    var _characterIds: [Int32] = []
    var _players: [Witwiz_PlayerState] = []
    var _obstacles: [Witwiz_ObstacleState] = []
    var _levelEdges: [Witwiz_LevelEdgeState] = []
    var _tileChunks: [Witwiz_TileChunk] = []

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _isInitial = source._isInitial
      _gameStarted = source._gameStarted
      _gameOver = source._gameOver
      _gamePaused = source._gamePaused
      _levelID = source._levelID
      _levelPosition = source._levelPosition
      _levelSize = source._levelSize
      _nextLevelPortal = source._nextLevelPortal
      _characterIds = source._characterIds
      _players = source._players
      _obstacles = source._obstacles
      _levelEdges = source._levelEdges
      _tileChunks = source._tileChunks
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._isInitial) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._gameStarted) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._gameOver) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._gamePaused) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._levelID) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._levelPosition) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._levelSize) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._nextLevelPortal) }()
        case 9: try { try decoder.decodeRepeatedInt32Field(value: &_storage._characterIds) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._players) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._obstacles) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._levelEdges) }()
        case 13: try { try decoder.decodeRepeatedMessageField(value: &_storage._tileChunks) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._isInitial != false {
        try visitor.visitSingularBoolField(value: _storage._isInitial, fieldNumber: 1)
      }
      if _storage._gameStarted != false {
        try visitor.visitSingularBoolField(value: _storage._gameStarted, fieldNumber: 2)
      }
      if _storage._gameOver != false {
        try visitor.visitSingularBoolField(value: _storage._gameOver, fieldNumber: 3)
      }
      if _storage._gamePaused != false {
        try visitor.visitSingularBoolField(value: _storage._gamePaused, fieldNumber: 4)
      }
      if _storage._levelID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._levelID, fieldNumber: 5)
      }
      try { if let v = _storage._levelPosition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._levelSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._nextLevelPortal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if !_storage._characterIds.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._characterIds, fieldNumber: 9)
      }
      if !_storage._players.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._players, fieldNumber: 10)
      }
      if !_storage._obstacles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._obstacles, fieldNumber: 11)
      }
      if !_storage._levelEdges.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._levelEdges, fieldNumber: 12)
      }
      if !_storage._tileChunks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tileChunks, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_GameStateUpdate, rhs: Witwiz_GameStateUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._isInitial != rhs_storage._isInitial {return false}
        if _storage._gameStarted != rhs_storage._gameStarted {return false}
        if _storage._gameOver != rhs_storage._gameOver {return false}
        if _storage._gamePaused != rhs_storage._gamePaused {return false}
        if _storage._levelID != rhs_storage._levelID {return false}
        if _storage._levelPosition != rhs_storage._levelPosition {return false}
        if _storage._levelSize != rhs_storage._levelSize {return false}
        if _storage._nextLevelPortal != rhs_storage._nextLevelPortal {return false}
        if _storage._characterIds != rhs_storage._characterIds {return false}
        if _storage._players != rhs_storage._players {return false}
        if _storage._obstacles != rhs_storage._obstacles {return false}
        if _storage._levelEdges != rhs_storage._levelEdges {return false}
        if _storage._tileChunks != rhs_storage._tileChunks {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_PlayerState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayerState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "character_id"),
    3: .standard(proto: "max_speed"),
    4: .same(proto: "position"),
    5: .same(proto: "size"),
    6: .same(proto: "velocity"),
    7: .same(proto: "acceleration"),
    8: .standard(proto: "target_velocity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.characterID) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.maxSpeed) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._size) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._velocity) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._acceleration) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._targetVelocity) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.characterID != 0 {
      try visitor.visitSingularInt32Field(value: self.characterID, fieldNumber: 2)
    }
    if self.maxSpeed.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.maxSpeed, fieldNumber: 3)
    }
    try { if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._size {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._velocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._acceleration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._targetVelocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_PlayerState, rhs: Witwiz_PlayerState) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.characterID != rhs.characterID {return false}
    if lhs.maxSpeed != rhs.maxSpeed {return false}
    if lhs._position != rhs._position {return false}
    if lhs._size != rhs._size {return false}
    if lhs._velocity != rhs._velocity {return false}
    if lhs._acceleration != rhs._acceleration {return false}
    if lhs._targetVelocity != rhs._targetVelocity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_NextLevelPortalState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NextLevelPortalState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "position"),
    3: .same(proto: "size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._size) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._size {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_NextLevelPortalState, rhs: Witwiz_NextLevelPortalState) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._position != rhs._position {return false}
    if lhs._size != rhs._size {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_ObstacleState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObstacleState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "position"),
    3: .same(proto: "size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._size) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._size {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_ObstacleState, rhs: Witwiz_ObstacleState) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._position != rhs._position {return false}
    if lhs._size != rhs._size {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_Size: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Size"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "width"),
    2: .same(proto: "height"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.width) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.height) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.width.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.width, fieldNumber: 1)
    }
    if self.height.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.height, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_Size, rhs: Witwiz_Size) -> Bool {
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_Point: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Point"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.x) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.y) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 1)
    }
    if self.y.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_Point, rhs: Witwiz_Point) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_Vector: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Vector"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.x) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.y) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 1)
    }
    if self.y.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_Vector, rhs: Witwiz_Vector) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_LevelEdgeState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LevelEdgeState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "position"),
    3: .same(proto: "size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._size) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._size {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_LevelEdgeState, rhs: Witwiz_LevelEdgeState) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._position != rhs._position {return false}
    if lhs._size != rhs._size {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_Tile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Tile"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "row"),
    2: .same(proto: "col"),
    3: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.row) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.col) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.row != 0 {
      try visitor.visitSingularInt32Field(value: self.row, fieldNumber: 1)
    }
    if self.col != 0 {
      try visitor.visitSingularInt32Field(value: self.col, fieldNumber: 2)
    }
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_Tile, rhs: Witwiz_Tile) -> Bool {
    if lhs.row != rhs.row {return false}
    if lhs.col != rhs.col {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_TileChunk: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TileChunk"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "row"),
    2: .same(proto: "col"),
    3: .same(proto: "tiles"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.row) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.col) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.tiles) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.row != 0 {
      try visitor.visitSingularInt32Field(value: self.row, fieldNumber: 1)
    }
    if self.col != 0 {
      try visitor.visitSingularInt32Field(value: self.col, fieldNumber: 2)
    }
    if !self.tiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tiles, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_TileChunk, rhs: Witwiz_TileChunk) -> Bool {
    if lhs.row != rhs.row {return false}
    if lhs.col != rhs.col {return false}
    if lhs.tiles != rhs.tiles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Witwiz_TileChunkToLoad: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TileChunkToLoad"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "row"),
    2: .same(proto: "col"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.row) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.col) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.row != 0 {
      try visitor.visitSingularInt32Field(value: self.row, fieldNumber: 1)
    }
    if self.col != 0 {
      try visitor.visitSingularInt32Field(value: self.col, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Witwiz_TileChunkToLoad, rhs: Witwiz_TileChunkToLoad) -> Bool {
    if lhs.row != rhs.row {return false}
    if lhs.col != rhs.col {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
